{"ast":null,"code":"import _slicedToArray from \"/home/gustavo/Rocketseat/Bootcamp/Desafios/gympointWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gustavo/Rocketseat/Bootcamp/Desafios/gympointWeb/src/pages/Plans/form.js\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { format, subDays, addDays, setHours, setMinutes, setSeconds, isBefore, isEqual, parseISO } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdAdd, MdArrowBack, MdCheck } from 'react-icons/md';\nimport api from \"../../services/api\";\nimport history from \"../../services/history\";\nimport { Tbody } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nexport default function Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        shcedule = _useState2[0],\n        setSchedule = _useState2[1];\n\n  const _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        date = _useState4[0],\n        setDate = _useState4[1];\n\n  const dateFormatted = useMemo(() => format(date, \"d 'de' MMMM\", {\n    locale: pt\n  }), [date]);\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedules', {\n        params: {\n          date\n        }\n      });\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a => isEqual(parseISO(a.date), compareDate))\n        };\n      });\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  function goTo(page) {\n    history.push(`/${page}`);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Cadastro de plano\"), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"greyButton\",\n    onClick: () => goTo('plans'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(MdArrowBack, {\n    size: 16,\n    color: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), \" VOLTAR\"), React.createElement(\"button\", {\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(MdCheck, {\n    size: 16,\n    color: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), \" SALVAR\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"NOME DO PLANO\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"DURA\\xC7\\xC3O\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"PRE\\xC7O MENSAL\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"PRE\\xC7O TOTAL\"), React.createElement(\"input\", {\n    disabled: \"disabled\",\n    value: \"R$ 0,00\",\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["/home/gustavo/Rocketseat/Bootcamp/Desafios/gympointWeb/src/pages/Plans/form.js"],"names":["React","useState","useMemo","useEffect","format","subDays","addDays","setHours","setMinutes","setSeconds","isBefore","isEqual","parseISO","utcToZonedTime","pt","MdAdd","MdArrowBack","MdCheck","api","history","Tbody","range","Dashboard","shcedule","setSchedule","Date","date","setDate","dateFormatted","locale","loadSchedule","response","get","params","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","data","map","hour","checkDate","compareDate","time","past","appointment","find","a","handlePrevDay","handleNextDay","goTo","page","push"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport {\n  format,\n  subDays,\n  addDays,\n  setHours,\n  setMinutes,\n  setSeconds,\n  isBefore,\n  isEqual,\n  parseISO,\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdAdd, MdArrowBack, MdCheck } from 'react-icons/md';\nimport api from '~/services/api';\n\nimport history from '~/services/history';\n\nimport { Tbody } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n  const [shcedule, setSchedule] = useState([]);\n  const [date, setDate] = useState(new Date());\n\n  const dateFormatted = useMemo(\n    () => format(date, \"d 'de' MMMM\", { locale: pt }),\n    [date]\n  );\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedules', {\n        params: { date },\n      });\n\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a =>\n            isEqual(parseISO(a.date), compareDate)\n          ),\n        };\n      });\n\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  function goTo(page) {\n    history.push(`/${page}`);\n  }\n\n  return (\n    <>\n      <header>\n        <h1>Cadastro de plano</h1>\n        <aside>\n          <button\n            type='button'\n            className='greyButton'\n            onClick={() => goTo('plans')}\n          >\n            <MdArrowBack size={16} color='#fff' /> VOLTAR\n          </button>\n          <button type='button'>\n            <MdCheck size={16} color='#fff' /> SALVAR\n          </button>\n        </aside>\n      </header>\n      <div>\n        <form>\n          <label htmlFor='name'>NOME DO PLANO</label>\n          <input type='text' name='name' id='name' />\n          <div>\n            <div>\n              <label htmlFor='name'>DURAÇÃO</label>\n              <input type='text' name='' id='' />\n            </div>\n            <div>\n              <label htmlFor='name'>PREÇO MENSAL</label>\n              <input type='text' name='' id='' />\n            </div>\n            <div>\n              <label htmlFor='name'>PREÇO TOTAL</label>\n              <input\n                disabled='disabled'\n                value='R$ 0,00'\n                type='text'\n                name=''\n                id=''\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}