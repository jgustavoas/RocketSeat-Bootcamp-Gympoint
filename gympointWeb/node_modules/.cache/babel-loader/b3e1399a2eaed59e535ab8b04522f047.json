{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport history from \"../../../services/history\";\nimport { signInSuccess, signFailure } from './actions';\nimport api from \"../../../services/api\";\nexport function* signIn({\n  payload\n}) {\n  try {\n    const email = payload.email,\n          password = payload.password;\n    /* Chamar a api (função \"call\") com o método indicado no primeiro parâmetro,\n     com a url como segundo parâmetro (neste caso \"sessions\", como no Insomnia),\n     e os dados passados à requsição como objeto no terceiro parâmetro (\"email\" e \"password\", como no Insomnia)\n    */\n\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password\n    }); // Se a chamada funcionar, obter o token e os dados do usuário\n\n    const _response$data = response.data,\n          token = _response$data.token,\n          user = _response$data.user;\n    api.defaults.headers.Authorization = `Bearer ${token}`; // Se passar na conferência do tipo de usuário, por os dados (\"put\") na action signInSuccess\n\n    yield put(signInSuccess(token, user));\n    history.push('/students');\n  } catch (err) {\n    toast.error('Falha na autenticação. Verifique seus dados.');\n    yield put(signFailure());\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  try {\n    const name = payload.name,\n          email = payload.email,\n          password = payload.password;\n    yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n      provider: true\n    });\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro. Verifique seus dados.');\n    yield put(signFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const token = payload.auth.token;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\nexport function signOut() {\n  history.push('/');\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), // Persistir o token e manter autenticada a navegação\ntakeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp), takeLatest('@auth/SIGN_OUT', signOut)]);","map":{"version":3,"sources":["/home/gustavo/Rocketseat/Bootcamp/Desafios/gympointWeb/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","history","signInSuccess","signFailure","api","signIn","payload","email","password","response","post","data","token","user","defaults","headers","Authorization","push","err","error","signUp","name","provider","setToken","auth","signOut"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,WAA3C;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AAAA,UACMC,KADN,GAC0BD,OAD1B,CACMC,KADN;AAAA,UACaC,QADb,GAC0BF,OAD1B,CACaE,QADb;AAGF;;;;;AAIA,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACO,GAAG,CAACM,IAAL,EAAW,UAAX,EAAuB;AAChDH,MAAAA,KADgD;AAEhDC,MAAAA;AAFgD,KAAvB,CAA3B,CAPE,CAYF;;AAZE,2BAasBC,QAAQ,CAACE,IAb/B;AAAA,UAaMC,KAbN,kBAaMA,KAbN;AAAA,UAaaC,IAbb,kBAaaA,IAbb;AAeFT,IAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASJ,KAAM,EAArD,CAfE,CAiBF;;AACA,UAAMd,GAAG,CAACI,aAAa,CAACU,KAAD,EAAQC,IAAR,CAAd,CAAT;AAEAZ,IAAAA,OAAO,CAACgB,IAAR,CAAa,WAAb;AACD,GArBD,CAqBE,OAAOC,GAAP,EAAY;AACZlB,IAAAA,KAAK,CAACmB,KAAN,CAAY,8CAAZ;AACA,UAAMrB,GAAG,CAACK,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,UAAUiB,MAAV,CAAiB;AAAEd,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AAAA,UACMe,IADN,GACgCf,OADhC,CACMe,IADN;AAAA,UACYd,KADZ,GACgCD,OADhC,CACYC,KADZ;AAAA,UACmBC,QADnB,GACgCF,OADhC,CACmBE,QADnB;AAGF,UAAMX,IAAI,CAACO,GAAG,CAACM,IAAL,EAAW,OAAX,EAAoB;AAC5BW,MAAAA,IAD4B;AAE5Bd,MAAAA,KAF4B;AAG5BC,MAAAA,QAH4B;AAI5Bc,MAAAA,QAAQ,EAAE;AAJkB,KAApB,CAAV;AAOArB,IAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZlB,IAAAA,KAAK,CAACmB,KAAN,CAAY,0CAAZ;AAEA,UAAMrB,GAAG,CAACK,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,SAASoB,QAAT,CAAkB;AAAEjB,EAAAA;AAAF,CAAlB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AADsB,QAG5BM,KAH4B,GAGlBN,OAAO,CAACkB,IAHU,CAG5BZ,KAH4B;;AAKpC,MAAIA,KAAJ,EAAW;AACTR,IAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASJ,KAAM,EAArD;AACD;AACF;AAED,OAAO,SAASa,OAAT,GAAmB;AACxBxB,EAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD;AAED,eAAelB,GAAG,CAAC,CACjBH,UAAU,CAAC,mBAAD,EAAsB2B,QAAtB,CADO,EAC0B;AAC3C3B,UAAU,CAAC,uBAAD,EAA0BS,MAA1B,CAFO,EAGjBT,UAAU,CAAC,uBAAD,EAA0BwB,MAA1B,CAHO,EAIjBxB,UAAU,CAAC,gBAAD,EAAmB6B,OAAnB,CAJO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport history from '~/services/history';\nimport { signInSuccess, signFailure } from './actions';\n\nimport api from '~/services/api';\n\nexport function* signIn({ payload }) {\n  try {\n    const { email, password } = payload;\n\n    /* Chamar a api (função \"call\") com o método indicado no primeiro parâmetro,\n     com a url como segundo parâmetro (neste caso \"sessions\", como no Insomnia),\n     e os dados passados à requsição como objeto no terceiro parâmetro (\"email\" e \"password\", como no Insomnia)\n  */\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password,\n    });\n\n    // Se a chamada funcionar, obter o token e os dados do usuário\n    const { token, user } = response.data;\n\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n\n    // Se passar na conferência do tipo de usuário, por os dados (\"put\") na action signInSuccess\n    yield put(signInSuccess(token, user));\n\n    history.push('/students');\n  } catch (err) {\n    toast.error('Falha na autenticação. Verifique seus dados.');\n    yield put(signFailure());\n  }\n}\n\nexport function* signUp({ payload }) {\n  try {\n    const { name, email, password } = payload;\n\n    yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n      provider: true,\n    });\n\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro. Verifique seus dados.');\n\n    yield put(signFailure());\n  }\n}\n\nexport function setToken({ payload }) {\n  if (!payload) return;\n\n  const { token } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\n\nexport function signOut() {\n  history.push('/');\n}\n\nexport default all([\n  takeLatest('persist/REHYDRATE', setToken), // Persistir o token e manter autenticada a navegação\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', signUp),\n  takeLatest('@auth/SIGN_OUT', signOut),\n]);\n"]},"metadata":{},"sourceType":"module"}