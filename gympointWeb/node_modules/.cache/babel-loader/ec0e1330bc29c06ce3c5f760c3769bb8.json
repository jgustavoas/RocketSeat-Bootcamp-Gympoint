{"ast":null,"code":"import _slicedToArray from \"/home/gustavo/Rocketseat/Bootcamp/Gympoint/gympointWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gustavo/Rocketseat/Bootcamp/Gympoint/gympointWeb/src/pages/HelpOrders/index.js\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { format, subDays, addDays, setHours, setMinutes, setSeconds, isBefore, isEqual, parseISO } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdAdd, MdCheckCircle } from 'react-icons/md';\nimport api from \"../../services/api\";\nimport { Tbody } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nexport default function Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        shcedule = _useState2[0],\n        setSchedule = _useState2[1];\n\n  const _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        date = _useState4[0],\n        setDate = _useState4[1];\n\n  const dateFormatted = useMemo(() => format(date, \"d 'de' MMMM\", {\n    locale: pt\n  }), [date]);\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedules', {\n        params: {\n          date\n        }\n      });\n      console.tron.log('data', response.data);\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a => isEqual(parseISO(a.date), compareDate))\n        };\n      });\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Pedidos de aux\\xEDlio\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"ALUNO\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Jos\\xE9 Gustavo\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"blueMinimalButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"responder\"))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Aluno 15\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"blueMinimalButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"responder\"))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Aluno 7\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"blueMinimalButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"responder\"))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Aluno 3\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"blueMinimalButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"responder\")))))));\n}","map":{"version":3,"sources":["/home/gustavo/Rocketseat/Bootcamp/Gympoint/gympointWeb/src/pages/HelpOrders/index.js"],"names":["React","useState","useMemo","useEffect","format","subDays","addDays","setHours","setMinutes","setSeconds","isBefore","isEqual","parseISO","utcToZonedTime","pt","MdAdd","MdCheckCircle","api","Tbody","range","Dashboard","shcedule","setSchedule","Date","date","setDate","dateFormatted","locale","loadSchedule","response","get","params","console","tron","log","data","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","map","hour","checkDate","compareDate","time","past","appointment","find","a","handlePrevDay","handleNextDay"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport {\n  format,\n  subDays,\n  addDays,\n  setHours,\n  setMinutes,\n  setSeconds,\n  isBefore,\n  isEqual,\n  parseISO,\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdAdd, MdCheckCircle } from 'react-icons/md';\nimport api from '~/services/api';\n\nimport { Tbody } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n  const [shcedule, setSchedule] = useState([]);\n  const [date, setDate] = useState(new Date());\n\n  const dateFormatted = useMemo(\n    () => format(date, \"d 'de' MMMM\", { locale: pt }),\n    [date]\n  );\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedules', {\n        params: { date },\n      });\n\n      console.tron.log('data', response.data);\n\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      const data = range.map(hour => {\n        const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(checkDate, timezone);\n\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a =>\n            isEqual(parseISO(a.date), compareDate)\n          ),\n        };\n      });\n\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  return (\n    <>\n      <header>\n        <h1>Pedidos de auxílio</h1>\n      </header>\n      <div>\n        <table>\n          <thead>\n            <td>ALUNO</td>\n            <td />\n          </thead>\n          <tbody>\n            <tr>\n              <td>José Gustavo</td>\n              <td>\n                <button type='button' className='blueMinimalButton'>\n                  responder\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>Aluno 15</td>\n              <td>\n                <button type='button' className='blueMinimalButton'>\n                  responder\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>Aluno 7</td>\n              <td>\n                <button type='button' className='blueMinimalButton'>\n                  responder\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>Aluno 3</td>\n              <td>\n                <button type='button' className='blueMinimalButton'>\n                  responder\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}