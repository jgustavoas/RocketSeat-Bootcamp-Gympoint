{"ast":null,"code":"import _slicedToArray from \"/home/gustavo/Rocketseat/Bootcamp/Gympoint/gympointWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gustavo/Rocketseat/Bootcamp/Gympoint/gympointWeb/src/pages/Matriculations/form.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Select from 'react-select';\nimport Async, { makeAsyncSelect } from 'react-select/async';\nimport { format, parseISO, addMonths } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\nimport { MdArrowBack, MdCheck } from 'react-icons/md';\nimport api from \"../../services/api\";\nimport { request } from \"../../store/modules/data/actions\";\nimport history from \"../../services/history\";\nexport default function Dashboard() {\n  const dispatch = useDispatch();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        students = _useState2[0],\n        setStudents = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        matriculation = _useState4[0],\n        setMatriculation = _useState4[1];\n\n  const active = matriculation.active,\n        studentId = matriculation.studentId,\n        planId = matriculation.planId,\n        price = matriculation.price,\n        studentName = matriculation.studentName,\n        planTitle = matriculation.planTitle,\n        planDuration = matriculation.planDuration,\n        start_dateFormated = matriculation.start_dateFormated,\n        end_dateFormated = matriculation.end_dateFormated;\n  console.tron.log(matriculation);\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        plans = _useState6[0],\n        setPlans = _useState6[1];\n\n  console.tron.log(plans);\n\n  const Plans = () => {\n    return React.createElement(\"select\", {\n      name: \"plans\",\n      onChange: event => handleEvent(JSON.parse(event.target.value), start_dateFormated),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, plans.map(plan => React.createElement(\"option\", {\n      selected: matriculation.planId === plan.id ? 'selected' : '',\n      value: `{\"id\":${plan.id}, \"title\":\"${plan.title}\", \"price\":${plan.price}, \"duration\":${plan.duration}}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, `${plan.title} (R$${plan.price},00 / ${plan.duration} ${plan.duration > 1 ? 'meses' : 'mês'})`)));\n  };\n\n  const listedPlans = useMemo(() => React.createElement(Plans, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), []);\n  const params = new URL(document.location).searchParams;\n  const matriculationId = params.get('id') ? params.get('id') : '';\n  useEffect(() => {\n    async function plansData() {\n      const response = await api.get(`plans`);\n      setPlans(response.data);\n    }\n\n    setMatriculation(plansData);\n\n    async function matriculationData() {\n      const response = await api.get(`matriculations/${matriculationId}`);\n      const formatStartDate = format(parseISO(response.data.start_date), 'yyyy-MM-dd', {\n        locale: pt\n      });\n      const formatEndDate = format(parseISO(response.data.end_date), 'yyyy-MM-dd', {\n        locale: pt\n      });\n      const matriculationData = {\n        active: response.data.active,\n        matriculationId: response.data.id,\n        studentId: response.data.student_id,\n        studentName: response.data.students.name,\n        planId: response.data.plan_id,\n        planDuration: response.data.plans.duration,\n        planTitle: response.data.plans.title,\n        price: response.data.price,\n        start_dateFormated: formatStartDate,\n        end_dateFormated: formatEndDate\n      };\n      setMatriculation(matriculationData);\n    }\n\n    if (matriculationId !== '') {\n      matriculationData();\n    }\n  }, [matriculationId]);\n\n  function goTo(page) {\n    history.push(`/${page}`);\n  }\n\n  function formatEndDate(refDate, planDuration) {\n    return format(addMonths(new Date(refDate), planDuration), 'yyyy-MM-dd');\n  }\n\n  function handleEvent(planValue, start_dateFormated) {\n    setMatriculation({\n      active,\n      matriculationId,\n      studentId,\n      studentName,\n      planId: planValue.id,\n      planDuration: planValue.duration,\n      planTitle: planValue.title,\n      price: planValue.price * planValue.duration,\n      start_dateFormated,\n      end_dateFormated: formatEndDate(start_dateFormated, planValue.duration)\n    });\n  }\n\n  function handleSubmit(formData) {\n    const studentId = formData.studentId,\n          planId = formData.planId,\n          start_dateFormated = formData.start_dateFormated;\n    const action = matriculationId ? request('UPDATE', 'matriculations', {\n      id: studentId,\n      rest: {\n        plan_id: planId,\n        start_date: start_dateFormated\n      }\n    }) : request('CREATE', 'matriculations', {\n      student_id: studentId,\n      plan_id: planId,\n      start_date: start_dateFormated\n    });\n    dispatch(action);\n  }\n\n  const options = [{\n    value: 'chocolate',\n    label: 'Chocolate'\n  }, {\n    value: 'strawberry',\n    label: 'Strawberry'\n  }, {\n    value: 'vanilla',\n    label: 'Vanilla'\n  }];\n\n  const MyComponent = () => React.createElement(Select, {\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  });\n\n  return React.createElement(React.Fragment, null, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Cadastro de matr\\xEDcula\"), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"greyButton\",\n    onClick: () => goTo('matriculations'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(MdArrowBack, {\n    size: 16,\n    color: \"#ee4d64\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), \" VOLTAR\"), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => handleSubmit(matriculation),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(MdCheck, {\n    size: 16,\n    color: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), \" SALVAR\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"NOME DO ALUNO\"), React.createElement(MyComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    disabled: matriculationId === '' ? '' : 'disabled',\n    value: studentName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"PLANO\"), listedPlans, React.createElement(\"select\", {\n    name: \"plans\",\n    onChange: event => handleEvent(JSON.parse(event.target.value), start_dateFormated),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, plans.map(plan => React.createElement(\"option\", {\n    selected: matriculation.planId === plan.id ? 'selected' : '',\n    value: `{\"id\":${plan.id}, \"title\":\"${plan.title}\", \"price\":${plan.price}, \"duration\":${plan.duration}}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, `${plan.title} (R$${plan.price},00 / ${plan.duration} ${plan.duration > 1 ? 'meses' : 'mês'})`)))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"DATA DE IN\\xCDCIO\"), React.createElement(\"input\", {\n    type: \"date\",\n    value: start_dateFormated,\n    name: \"startDateInput\",\n    onChange: event => setMatriculation({\n      active,\n      matriculationId,\n      studentId,\n      planId,\n      planDuration,\n      price,\n      studentName,\n      planTitle,\n      start_dateFormated: event.target.value,\n      end_dateFormated: formatEndDate(event.target.value, planDuration)\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, \"DATA DE T\\xC9RMINO\"), React.createElement(\"input\", {\n    type: \"date\",\n    disabled: true,\n    name: \"\",\n    id: \"\",\n    value: end_dateFormated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, \"VALOR TOTAL\"), React.createElement(\"input\", {\n    disabled: \"disabled\",\n    value: price,\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["/home/gustavo/Rocketseat/Bootcamp/Gympoint/gympointWeb/src/pages/Matriculations/form.js"],"names":["React","useState","useEffect","useMemo","useDispatch","Select","Async","makeAsyncSelect","format","parseISO","addMonths","utcToZonedTime","pt","MdArrowBack","MdCheck","api","request","history","Dashboard","dispatch","students","setStudents","matriculation","setMatriculation","active","studentId","planId","price","studentName","planTitle","planDuration","start_dateFormated","end_dateFormated","console","tron","log","plans","setPlans","Plans","event","handleEvent","JSON","parse","target","value","map","plan","id","title","duration","listedPlans","params","URL","document","location","searchParams","matriculationId","get","plansData","response","data","matriculationData","formatStartDate","start_date","locale","formatEndDate","end_date","student_id","name","plan_id","goTo","page","push","refDate","Date","planValue","handleSubmit","formData","action","rest","options","label","MyComponent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Select from 'react-select';\nimport Async, { makeAsyncSelect } from 'react-select/async';\n\nimport { format, parseISO, addMonths } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt';\n\nimport { MdArrowBack, MdCheck } from 'react-icons/md';\n\nimport api from '~/services/api';\n\nimport { request } from '~/store/modules/data/actions';\n\nimport history from '~/services/history';\n\nexport default function Dashboard() {\n  const dispatch = useDispatch();\n\n  const [students, setStudents] = useState([]);\n\n  const [matriculation, setMatriculation] = useState([]);\n  const {\n    active,\n    studentId,\n    planId,\n    price,\n    studentName,\n    planTitle,\n    planDuration,\n    start_dateFormated,\n    end_dateFormated,\n  } = matriculation;\n  console.tron.log(matriculation);\n\n  const [plans, setPlans] = useState([]);\n  console.tron.log(plans);\n\n  const Plans = () => {\n    return (\n      <select\n        name='plans'\n        onChange={event =>\n          handleEvent(JSON.parse(event.target.value), start_dateFormated)\n        }\n      >\n        {plans.map(plan => (\n          <option\n            selected={matriculation.planId === plan.id ? 'selected' : ''}\n            value={`{\"id\":${plan.id}, \"title\":\"${plan.title}\", \"price\":${plan.price}, \"duration\":${plan.duration}}`}\n          >\n            {`${plan.title} (R$${plan.price},00 / ${plan.duration} ${\n              plan.duration > 1 ? 'meses' : 'mês'\n            })`}\n          </option>\n        ))}\n      </select>\n    );\n  };\n\n  const listedPlans = useMemo(() => <Plans />, []);\n\n  const params = new URL(document.location).searchParams;\n  const matriculationId = params.get('id') ? params.get('id') : '';\n\n  useEffect(() => {\n    async function plansData() {\n      const response = await api.get(`plans`);\n      setPlans(response.data);\n    }\n    setMatriculation(plansData);\n\n    async function matriculationData() {\n      const response = await api.get(`matriculations/${matriculationId}`);\n\n      const formatStartDate = format(\n        parseISO(response.data.start_date),\n        'yyyy-MM-dd',\n        {\n          locale: pt,\n        }\n      );\n      const formatEndDate = format(\n        parseISO(response.data.end_date),\n        'yyyy-MM-dd',\n        {\n          locale: pt,\n        }\n      );\n\n      const matriculationData = {\n        active: response.data.active,\n        matriculationId: response.data.id,\n        studentId: response.data.student_id,\n        studentName: response.data.students.name,\n        planId: response.data.plan_id,\n        planDuration: response.data.plans.duration,\n        planTitle: response.data.plans.title,\n        price: response.data.price,\n        start_dateFormated: formatStartDate,\n        end_dateFormated: formatEndDate,\n      };\n\n      setMatriculation(matriculationData);\n    }\n\n    if (matriculationId !== '') {\n      matriculationData();\n    }\n  }, [matriculationId]);\n\n  function goTo(page) {\n    history.push(`/${page}`);\n  }\n\n  function formatEndDate(refDate, planDuration) {\n    return format(addMonths(new Date(refDate), planDuration), 'yyyy-MM-dd');\n  }\n\n  function handleEvent(planValue, start_dateFormated) {\n    setMatriculation({\n      active,\n      matriculationId,\n      studentId,\n      studentName,\n      planId: planValue.id,\n      planDuration: planValue.duration,\n      planTitle: planValue.title,\n      price: planValue.price * planValue.duration,\n      start_dateFormated,\n      end_dateFormated: formatEndDate(start_dateFormated, planValue.duration),\n    });\n  }\n\n  function handleSubmit(formData) {\n    const { studentId, planId, start_dateFormated } = formData;\n    const action = matriculationId\n      ? request('UPDATE', 'matriculations', {\n          id: studentId,\n          rest: { plan_id: planId, start_date: start_dateFormated },\n        })\n      : request('CREATE', 'matriculations', {\n          student_id: studentId,\n          plan_id: planId,\n          start_date: start_dateFormated,\n        });\n    dispatch(action);\n  }\n\n  const options = [\n    { value: 'chocolate', label: 'Chocolate' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'vanilla', label: 'Vanilla' },\n  ];\n\n  const MyComponent = () => <Select options={options} />;\n\n  return (\n    <>\n      <header>\n        <h1>Cadastro de matrícula</h1>\n        <aside>\n          <button\n            type='button'\n            className='greyButton'\n            onClick={() => goTo('matriculations')}\n          >\n            <MdArrowBack size={16} color='#ee4d64' /> VOLTAR\n          </button>\n          <button type='button' onClick={() => handleSubmit(matriculation)}>\n            <MdCheck size={16} color='#fff' /> SALVAR\n          </button>\n        </aside>\n      </header>\n      <div>\n        <form>\n          <label htmlFor='name'>NOME DO ALUNO</label>\n          <MyComponent />\n          <input\n            type='text'\n            name='name'\n            id='name'\n            disabled={matriculationId === '' ? '' : 'disabled'}\n            value={studentName}\n          />\n          <div>\n            <div>\n              <label htmlFor='name'>PLANO</label>\n              {listedPlans}\n              <select\n                name='plans'\n                onChange={event =>\n                  handleEvent(\n                    JSON.parse(event.target.value),\n                    start_dateFormated\n                  )\n                }\n              >\n                {plans.map(plan => (\n                  <option\n                    selected={\n                      matriculation.planId === plan.id ? 'selected' : ''\n                    }\n                    value={`{\"id\":${plan.id}, \"title\":\"${plan.title}\", \"price\":${plan.price}, \"duration\":${plan.duration}}`}\n                  >\n                    {`${plan.title} (R$${plan.price},00 / ${plan.duration} ${\n                      plan.duration > 1 ? 'meses' : 'mês'\n                    })`}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label htmlFor='name'>DATA DE INÍCIO</label>\n              <input\n                type='date'\n                value={start_dateFormated}\n                name='startDateInput'\n                onChange={event =>\n                  setMatriculation({\n                    active,\n                    matriculationId,\n                    studentId,\n                    planId,\n                    planDuration,\n                    price,\n                    studentName,\n                    planTitle,\n                    start_dateFormated: event.target.value,\n                    end_dateFormated: formatEndDate(\n                      event.target.value,\n                      planDuration\n                    ),\n                  })\n                }\n              />\n            </div>\n            <div>\n              <label htmlFor='name'>DATA DE TÉRMINO</label>\n              <input\n                type='date'\n                disabled\n                name=''\n                id=''\n                value={end_dateFormated}\n              />\n            </div>\n            <div>\n              <label htmlFor='name'>VALOR TOTAL</label>\n              <input\n                disabled='disabled'\n                value={price}\n                type='text'\n                name=''\n                id=''\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}