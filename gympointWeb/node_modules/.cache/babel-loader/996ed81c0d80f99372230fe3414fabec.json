{"ast":null,"code":"import _objectWithoutProperties from \"/home/gustavo/Documentos/RocketSeat/Bootcamp/Desafios/gympointWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from \"../../../services/api\";\nimport { updateStudentFailure } from './actions';\nexport function* updateStudent({\n  payload\n}) {\n  try {\n    // const { name, email, avatar_id, ...rest } = payload.data;\n    const _payload$data = payload.data,\n          id = _payload$data.id,\n          rest = _objectWithoutProperties(_payload$data, [\"id\"]);\n\n    yield call(api.put, \"/students/\".concat(id), rest);\n    toast.success('Cadastro do aluno atualizado com sucesso!'); // yield put(updateStudentSuccess(payload.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar dados!');\n    yield put(updateStudentFailure());\n  }\n}\nexport function* newStudent({\n  payload\n}) {\n  try {\n    // const { name, email, avatar_id, ...rest } = payload.data;\n    const data = payload.data;\n    console.tron.log(data); // yield call(api.post, `/students`, data);\n\n    toast.success('Aluno cadastrado com sucesso!'); // yield put(updateStudentSuccess(payload.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar dados!');\n    yield put(updateStudentFailure());\n  }\n}\nexport default all([// Quando a action '@user/UPDATE_PROFILE_REQUEST' for despachada, executar um saga chamado \"updateStudent\"\ntakeLatest('@student/UPDATE_STUDENT_REQUEST', updateStudent), takeLatest('@student/NEW_STUDENT_REQUEST', newStudent)]);","map":{"version":3,"sources":["/home/gustavo/Documentos/RocketSeat/Bootcamp/Desafios/gympointWeb/src/store/modules/student/sagas.js"],"names":["takeLatest","call","put","all","toast","api","updateStudentFailure","updateStudent","payload","data","id","rest","success","err","error","newStudent","console","tron","log"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,oBAAT,QAAqC,WAArC;AAEA,OAAO,UAAUC,aAAV,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAqC;AAC1C,MAAI;AACF;AADE,0BAEsBA,OAAO,CAACC,IAF9B;AAAA,UAEMC,EAFN,iBAEMA,EAFN;AAAA,UAEaC,IAFb;;AAIF,UAAMV,IAAI,CAACI,GAAG,CAACH,GAAL,sBAAuBQ,EAAvB,GAA6BC,IAA7B,CAAV;AAEAP,IAAAA,KAAK,CAACQ,OAAN,CAAc,2CAAd,EANE,CAQF;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACZT,IAAAA,KAAK,CAACU,KAAN,CAAY,0BAAZ;AACA,UAAMZ,GAAG,CAACI,oBAAoB,EAArB,CAAT;AACD;AACF;AAED,OAAO,UAAUS,UAAV,CAAqB;AAAEP,EAAAA;AAAF,CAArB,EAAkC;AACvC,MAAI;AACF;AADE,UAEMC,IAFN,GAEeD,OAFf,CAEMC,IAFN;AAGFO,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBT,IAAjB,EAHE,CAIF;;AAEAL,IAAAA,KAAK,CAACQ,OAAN,CAAc,+BAAd,EANE,CAQF;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACZT,IAAAA,KAAK,CAACU,KAAN,CAAY,0BAAZ;AACA,UAAMZ,GAAG,CAACI,oBAAoB,EAArB,CAAT;AACD;AACF;AAED,eAAeH,GAAG,CAAC,CACjB;AACAH,UAAU,CAAC,iCAAD,EAAoCO,aAApC,CAFO,EAGjBP,UAAU,CAAC,8BAAD,EAAiCe,UAAjC,CAHO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '~/services/api';\n\nimport { updateStudentFailure } from './actions';\n\nexport function* updateStudent({ payload }) {\n  try {\n    // const { name, email, avatar_id, ...rest } = payload.data;\n    const { id, ...rest } = payload.data;\n\n    yield call(api.put, `/students/${id}`, rest);\n\n    toast.success('Cadastro do aluno atualizado com sucesso!');\n\n    // yield put(updateStudentSuccess(payload.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar dados!');\n    yield put(updateStudentFailure());\n  }\n}\n\nexport function* newStudent({ payload }) {\n  try {\n    // const { name, email, avatar_id, ...rest } = payload.data;\n    const { data } = payload;\n    console.tron.log(data);\n    // yield call(api.post, `/students`, data);\n\n    toast.success('Aluno cadastrado com sucesso!');\n\n    // yield put(updateStudentSuccess(payload.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar dados!');\n    yield put(updateStudentFailure());\n  }\n}\n\nexport default all([\n  // Quando a action '@user/UPDATE_PROFILE_REQUEST' for despachada, executar um saga chamado \"updateStudent\"\n  takeLatest('@student/UPDATE_STUDENT_REQUEST', updateStudent),\n  takeLatest('@student/NEW_STUDENT_REQUEST', newStudent),\n]);\n"]},"metadata":{},"sourceType":"module"}