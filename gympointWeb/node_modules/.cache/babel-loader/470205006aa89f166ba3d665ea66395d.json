{"ast":null,"code":"import _objectWithoutProperties from \"/home/gustavo/Rocketseat/Bootcamp/Desafios/gympointWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from \"../../../services/api\";\nimport { newStudentFailure, updateStudentFailure } from './actions';\nexport function* updateStudent({\n  payload\n}) {\n  try {\n    // const { name, email, avatar_id, ...rest } = payload.data;\n    const _payload$data = payload.data,\n          id = _payload$data.id,\n          rest = _objectWithoutProperties(_payload$data, [\"id\"]);\n\n    yield call(api.put, `/students/${id}`, rest);\n    toast.success('Cadastro do aluno atualizado com sucesso!'); // yield put(updateStudentSuccess(payload.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar dados!');\n    yield put(updateStudentFailure());\n  }\n}\nexport function* newStudent({\n  payload\n}) {\n  const _payload$data2 = payload.data,\n        name = _payload$data2.name,\n        email = _payload$data2.email,\n        age = _payload$data2.age,\n        weight = _payload$data2.weight,\n        height = _payload$data2.height;\n  console.tron.log(typeof name);\n  console.tron.log(typeof email);\n  console.tron.log(typeof age);\n  console.tron.log(typeof weight);\n  console.tron.log(typeof height);\n  console.tron.log(payload.data);\n\n  try {\n    // const { name, email, age, weight, height } = payload.data;\n    yield call(api.post, `students`, {\n      name: 'Quinto aluno',\n      email: 'quinto@aluno.com',\n      age: 23,\n      weight: 57,\n      height: 1.65\n    });\n    toast.success('Aluno cadastrado com sucesso!'); // yield put(updateStudentSuccess(payload.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar dados!');\n    yield put(newStudentFailure());\n  }\n}\nexport function* deleteStudent({\n  payload\n}) {\n  try {\n    const data = payload.data;\n    yield call(api.delete, `students`, {\n      data: {\n        id: String(data)\n      }\n    });\n    toast.success('Cadastro do aluno deletado com sucesso!');\n    const response = yield call(api.get, 'students');\n  } catch (err) {\n    toast.error('Erro ao deletar cadastro!'); // yield put(deleteStudentFailure());\n  }\n}\nexport default all([// Quando a action '@user/UPDATE_PROFILE_REQUEST' for despachada, executar um saga chamado updateStudent\ntakeLatest('@student/UPDATE_STUDENT_REQUEST', updateStudent), takeLatest('@student/NEW_STUDENT_REQUEST', newStudent), takeLatest('@student/DELETE_STUDENT_REQUEST', deleteStudent)]);","map":{"version":3,"sources":["/home/gustavo/Rocketseat/Bootcamp/Desafios/gympointWeb/src/store/modules/student/sagas.js"],"names":["takeLatest","call","put","all","toast","api","newStudentFailure","updateStudentFailure","updateStudent","payload","data","id","rest","success","err","error","newStudent","name","email","age","weight","height","console","tron","log","post","deleteStudent","delete","String","response","get"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,iBAAT,EAA4BC,oBAA5B,QAAwD,WAAxD;AAEA,OAAO,UAAUC,aAAV,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAqC;AAC1C,MAAI;AACF;AADE,0BAEsBA,OAAO,CAACC,IAF9B;AAAA,UAEMC,EAFN,iBAEMA,EAFN;AAAA,UAEaC,IAFb;;AAIF,UAAMX,IAAI,CAACI,GAAG,CAACH,GAAL,EAAW,aAAYS,EAAG,EAA1B,EAA6BC,IAA7B,CAAV;AAEAR,IAAAA,KAAK,CAACS,OAAN,CAAc,2CAAd,EANE,CAQF;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACZV,IAAAA,KAAK,CAACW,KAAN,CAAY,0BAAZ;AACA,UAAMb,GAAG,CAACK,oBAAoB,EAArB,CAAT;AACD;AACF;AAED,OAAO,UAAUS,UAAV,CAAqB;AAAEP,EAAAA;AAAF,CAArB,EAAkC;AAAA,yBACMA,OAAO,CAACC,IADd;AAAA,QAC/BO,IAD+B,kBAC/BA,IAD+B;AAAA,QACzBC,KADyB,kBACzBA,KADyB;AAAA,QAClBC,GADkB,kBAClBA,GADkB;AAAA,QACbC,MADa,kBACbA,MADa;AAAA,QACLC,MADK,kBACLA,MADK;AAEvCC,EAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,OAAOP,IAAxB;AACAK,EAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,OAAON,KAAxB;AACAI,EAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,OAAOL,GAAxB;AACAG,EAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,OAAOJ,MAAxB;AACAE,EAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,OAAOH,MAAxB;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBf,OAAO,CAACC,IAAzB;;AACA,MAAI;AACF;AACA,UAAMT,IAAI,CAACI,GAAG,CAACoB,IAAL,EAAY,UAAZ,EAAuB;AAC/BR,MAAAA,IAAI,EAAE,cADyB;AAE/BC,MAAAA,KAAK,EAAE,kBAFwB;AAG/BC,MAAAA,GAAG,EAAE,EAH0B;AAI/BC,MAAAA,MAAM,EAAE,EAJuB;AAK/BC,MAAAA,MAAM,EAAE;AALuB,KAAvB,CAAV;AAQAjB,IAAAA,KAAK,CAACS,OAAN,CAAc,+BAAd,EAVE,CAYF;AACD,GAbD,CAaE,OAAOC,GAAP,EAAY;AACZV,IAAAA,KAAK,CAACW,KAAN,CAAY,0BAAZ;AACA,UAAMb,GAAG,CAACI,iBAAiB,EAAlB,CAAT;AACD;AACF;AAED,OAAO,UAAUoB,aAAV,CAAwB;AAAEjB,EAAAA;AAAF,CAAxB,EAAqC;AAC1C,MAAI;AAAA,UACMC,IADN,GACeD,OADf,CACMC,IADN;AAEF,UAAMT,IAAI,CAACI,GAAG,CAACsB,MAAL,EAAc,UAAd,EAAyB;AAAEjB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,EAAE,EAAEiB,MAAM,CAAClB,IAAD;AAAZ;AAAR,KAAzB,CAAV;AAEAN,IAAAA,KAAK,CAACS,OAAN,CAAc,yCAAd;AAEA,UAAMgB,QAAQ,GAAG,MAAM5B,IAAI,CAACI,GAAG,CAACyB,GAAL,EAAU,UAAV,CAA3B;AACD,GAPD,CAOE,OAAOhB,GAAP,EAAY;AACZV,IAAAA,KAAK,CAACW,KAAN,CAAY,2BAAZ,EADY,CAEZ;AACD;AACF;AAED,eAAeZ,GAAG,CAAC,CACjB;AACAH,UAAU,CAAC,iCAAD,EAAoCQ,aAApC,CAFO,EAGjBR,UAAU,CAAC,8BAAD,EAAiCgB,UAAjC,CAHO,EAIjBhB,UAAU,CAAC,iCAAD,EAAoC0B,aAApC,CAJO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '~/services/api';\n\nimport { newStudentFailure, updateStudentFailure } from './actions';\n\nexport function* updateStudent({ payload }) {\n  try {\n    // const { name, email, avatar_id, ...rest } = payload.data;\n    const { id, ...rest } = payload.data;\n\n    yield call(api.put, `/students/${id}`, rest);\n\n    toast.success('Cadastro do aluno atualizado com sucesso!');\n\n    // yield put(updateStudentSuccess(payload.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar dados!');\n    yield put(updateStudentFailure());\n  }\n}\n\nexport function* newStudent({ payload }) {\n  const { name, email, age, weight, height } = payload.data;\n  console.tron.log(typeof name);\n  console.tron.log(typeof email);\n  console.tron.log(typeof age);\n  console.tron.log(typeof weight);\n  console.tron.log(typeof height);\n  console.tron.log(payload.data);\n  try {\n    // const { name, email, age, weight, height } = payload.data;\n    yield call(api.post, `students`, {\n      name: 'Quinto aluno',\n      email: 'quinto@aluno.com',\n      age: 23,\n      weight: 57,\n      height: 1.65,\n    });\n\n    toast.success('Aluno cadastrado com sucesso!');\n\n    // yield put(updateStudentSuccess(payload.data));\n  } catch (err) {\n    toast.error('Erro ao atualizar dados!');\n    yield put(newStudentFailure());\n  }\n}\n\nexport function* deleteStudent({ payload }) {\n  try {\n    const { data } = payload;\n    yield call(api.delete, `students`, { data: { id: String(data) } });\n\n    toast.success('Cadastro do aluno deletado com sucesso!');\n\n    const response = yield call(api.get, 'students');\n  } catch (err) {\n    toast.error('Erro ao deletar cadastro!');\n    // yield put(deleteStudentFailure());\n  }\n}\n\nexport default all([\n  // Quando a action '@user/UPDATE_PROFILE_REQUEST' for despachada, executar um saga chamado updateStudent\n  takeLatest('@student/UPDATE_STUDENT_REQUEST', updateStudent),\n  takeLatest('@student/NEW_STUDENT_REQUEST', newStudent),\n  takeLatest('@student/DELETE_STUDENT_REQUEST', deleteStudent),\n]);\n"]},"metadata":{},"sourceType":"module"}